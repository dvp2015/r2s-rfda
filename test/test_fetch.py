# -*- coding: utf-8 -*-

import pytest

from r2s_rfda import fetch
from r2s_rfda import data


@pytest.mark.parametrize('tensor, material, alpha, beta, answer', [
    (
        (
            ('time', 'nuclide', 'n_erg', 'material'),
            ([10, 20], ['Fe56', 'Co60', 'Al27'], [0, 1, 2, 3], [101, 102]),
            {
                (10, 'Fe56', 0, 101): 1, (10, 'Fe56', 1, 101): 2, 
                (10, 'Fe56', 2, 101): 3, (10, 'Fe56', 3, 101): 4,
                (10, 'Co60', 0, 101): 10, (10, 'Co60', 1, 101): 9,
                (10, 'Co60', 2, 101): 8, (10, 'Co60', 3, 101): 7,
                (10, 'Al27', 0, 102): 20, (10, 'Al27', 1, 102): 10,
                (20, 'Fe56', 1, 101): 1, (20, 'Fe56', 2, 101): 1.5, 
                (20, 'Fe56', 3, 101): 2, (20, 'Co60', 0, 101): 5, 
                (20, 'Co60', 1, 101): 4.5, (20, 'Co60', 2, 101): 4, 
                (20, 'Co60', 3, 101): 3.5, (20, 'Al27', 0, 102): 10, 
                (20, 'Al27', 1, 102): 5            
            }
        ),
        (
            ('cell', 'material'),
            ([301, 302, 303], [101, 102]),
            {(301, 101): 1, (302, 101): 1, (303, 102): 1}
        ),
        (
            ('n_erg', 'i', 'j', 'k'),
            ([0, 1, 2, 3], [0, 1, 2], [0, 1], [0]),
            {
                (0, 0, 1, 0): 100, (1, 0, 1, 0): 200, (2, 0, 1, 0): 50,
                (3, 0, 1, 0): 100, (1, 1, 1, 0): 70, (2, 1, 1, 0): 90,
                (0, 2, 0, 0): 50, (1, 2, 0, 0): 70, (2, 2, 0, 0): 90,
                (3, 2, 0, 0): 110, (0, 2, 1, 0): 200, (1, 2, 1, 0): 250,
                (2, 2, 1, 0): 300, (3, 2, 1, 0): 400
            }
        ),
        (
            ('cell', 'i', 'j', 'k'), ([301, 302, 303], [0, 1, 2], [0, 1], [0]),
            {
                (301, 0, 1, 0): 0.5, (302, 0, 1, 0): 1, (302, 1, 1, 0): 2,
                (303, 2, 0, 0): 0.4, (303, 2, 1, 0): 3
            }
        ),
        (
            ('nuclide', 'time', 'cell', 'i', 'j', 'k'),
            (('Fe56', 'Co60', 'Al27'), (10, 20), (301, 302, 303), (0, 1, 2), (0, 1), (0,)),
            {
                (0, 0, 0, 0, 1, 0): (1 * 100 + 2 * 200 + 3 * 50 + 4 * 100) * 0.5,
                (0, 0, 1, 0, 1, 0): (1 * 100 + 2 * 200 + 3 * 50 + 4 * 100) * 1,
                (0, 0, 1, 1, 1, 0): (2 * 70 + 3 * 90) * 2,
                (1, 0, 0, 0, 1, 0): (10 * 100 + 9 * 200 + 8 * 50 + 7 * 100) * 0.5,
                (1, 0, 1, 0, 1, 0): (10 * 100 + 9 * 200 + 8 * 50 + 7 * 100) * 1,
                (1, 0, 1, 1, 1, 0): (9 * 70 + 8 * 90) * 2,
                (2, 0, 2, 2, 0, 0): (20 * 50 + 10 * 70) * 0.4,
                (2, 0, 2, 2, 1, 0): (20 * 200 + 10 * 250) * 3,
                (0, 1, 0, 0, 1, 0): (1 * 200 + 1.5 * 50 + 2 * 100) * 0.5,
                (0, 1, 1, 0, 1, 0): (1 * 200 + 1.5 * 50 + 2 * 100) * 1,
                (0, 1, 1, 1, 1, 0): (1 * 70 + 1.5 * 90) * 2,
                (1, 1, 0, 0, 1, 0): (5 * 100 + 4.5 * 200 + 4 * 50 + 3.5 * 100) * 0.5,
                (1, 1, 1, 0, 1, 0): (5 * 100 + 4.5 * 200 + 4 * 50 + 3.5 * 100) * 1,
                (1, 1, 1, 1, 1, 0): (4.5 * 70 + 4 * 90) * 2,
                (2, 1, 2, 2, 0, 0): (10 * 50 + 5 * 70) * 0.4,
                (2, 1, 2, 2, 1, 0): (10 * 200 + 5 * 250) * 3
            }
        )
    )
])
def test_apply_superposition(tensor, material, alpha, beta, answer):
    tensor = data.SparseData(*tensor)
    material = data.SparseData(*material)
    alpha = data.SparseData(*alpha)
    beta = data.SparseData(*beta)
    result = fetch.apply_superposition(tensor, material, alpha, beta)
    assert result.axes == answer[0]
    assert result.labels == answer[1]
    assert result.data.nnz == len(answer[2])
    for index, value in answer[2].items():
        assert result.data[index] == value
